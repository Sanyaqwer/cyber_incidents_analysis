import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from datetime import datetime, timedelta
import random
import os

st.set_page_config(page_title="–ê–Ω–∞–ª—ñ–∑ –∫—ñ–±–µ—Ä—ñ–Ω—Ü–∏–¥–µ–Ω—Ç—ñ–≤", layout="wide")
st.title("üõ°Ô∏è –ê–Ω–∞–ª—ñ–∑ –∫—ñ–±–µ—Ä—ñ–Ω—Ü–∏–¥–µ–Ω—Ç—ñ–≤")

filename = "cyber_incidents.csv"

if not os.path.exists(filename):
    st.warning("–§–∞–π–ª cyber_incidents.csv –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ...")
    attack_types = ["Phishing", "Ransomware", "DDoS", "Malware", "Insider Attack", "SQL Injection"]
    sectors = ["Finance", "Healthcare", "Education", "Government", "Energy", "Retail", "IT"]
    start_date = datetime(2021, 1, 1)
    end_date = datetime(2025, 10, 1)

    def random_date(start, end):
        return start + timedelta(days=random.randint(0, (end - start).days))

    data = []
    for _ in range(20):
        date = random_date(start_date, end_date).strftime("%Y-%m-%d")
        attack = random.choice(attack_types)
        sector = random.choice(sectors)
        losses = random.randint(1000, 500000)
        data.append([date, attack, sector, losses])

    df = pd.DataFrame(data, columns=["date", "attack_type", "sector", "losses"])
    df.to_csv(filename, index=False)
    st.success(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ñ–∞–π–ª '{filename}' –∑ —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏.")
else:
    df = pd.read_csv(filename, parse_dates=["date"])

df["year"] = df["date"].dt.year

col1, col2 = st.columns(2)
years = ["–£—Å—ñ"] + sorted(df["year"].unique().tolist())
attack_types = ["–£—Å—ñ"] + sorted(df["attack_type"].unique().tolist())

year = col1.selectbox("–í–∏–±–µ—Ä—ñ—Ç—å —Ä—ñ–∫:", years)
attack = col2.selectbox("–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∞—Ç–∞–∫–∏:", attack_types)

filtered = df.copy()
if year != "–£—Å—ñ":
    filtered = filtered[filtered["year"] == year]
if attack != "–£—Å—ñ":
    filtered = filtered[filtered["attack_type"] == attack]

st.write(f"üìä –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ {len(filtered)} –∑–∞–ø–∏—Å—ñ–≤ –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó.")

st.subheader("üìà –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ç–∞–∫ –∑–∞ —Å–µ–∫—Ç–æ—Ä–∞–º–∏")

sector_stats = filtered["sector"].value_counts()
fig, ax = plt.subplots(figsize=(8, 5))
sns.barplot(x=sector_stats.values, y=sector_stats.index, ax=ax)
ax.set_xlabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–Ω—Ü–∏–¥–µ–Ω—Ç—ñ–≤")
ax.set_ylabel("–°–µ–∫—Ç–æ—Ä")
st.pyplot(fig)

st.subheader("ü§ñ –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—è –∫—ñ–±–µ—Ä—ñ–Ω—Ü–∏–¥–µ–Ω—Ç—ñ–≤ (K-Means)")

if len(filtered) >= 3:
    X = filtered[["losses", "year"]].dropna()
    kmeans = KMeans(n_clusters=3, random_state=42)
    filtered["cluster"] = kmeans.fit_predict(X)

    fig2, ax2 = plt.subplots(figsize=(8, 6))
    scatter = ax2.scatter(filtered["year"], filtered["losses"], c=filtered["cluster"], cmap="viridis")
    ax2.set_xlabel("–†—ñ–∫")
    ax2.set_ylabel("–í—Ç—Ä–∞—Ç–∏ ($)")
    ax2.set_title("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó")
    st.pyplot(fig2)
else:
    st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó.")

st.subheader("üóÇÔ∏è –î–∞–Ω—ñ —ñ–Ω—Ü–∏–¥–µ–Ω—Ç—ñ–≤")
st.dataframe(filtered)


